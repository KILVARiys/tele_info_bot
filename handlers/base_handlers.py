from aiogram import Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from sqlite_db import create_profile
import phonenumbers
from phonenumbers import geocoder, carrier, timezone

router = Router(name=__name__)


# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(CommandStart())
async def handle_start(message: Message):
    await message.answer(text='üëã –ü—Ä–∏–≤–µ—Ç!')


# –ö–æ–º–∞–Ω–¥–∞ /retry
@router.message(Command('retry'))
async def handle_retry(message: Message):
    await message.answer(
        text=f'{message.from_user.id}, {message.from_user.full_name}, {message.from_user.username}'
    )


# –ö–æ–º–∞–Ω–¥–∞ /add_me ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(Command('add_me'))
async def handle_adding(message: Message):
    button = KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)
    keyboard = ReplyKeyboardMarkup(keyboard=[[button]], one_time_keyboard=True, resize_keyboard=True)
    await message.answer("üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞
@router.message()
async def handle_contact(message: Message):
    if message.contact:
        phone = message.contact.phone_number
        user_id = str(message.from_user.id)
        username = message.from_user.full_name
        dname = message.from_user.username

        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if not phone.startswith('+'):
                phone = '+7' + phone if len(phone) == 10 or phone.startswith('7') else '+' + phone

            # –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            parsed_number = phonenumbers.parse(phone, "RU")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
            if not phonenumbers.is_valid_number(parsed_number):
                await message.answer("‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            country = geocoder.description_for_number(parsed_number, "ru")
            num_type = phonenumbers.number_type(parsed_number)

            type_names = {
                0: "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π",
                1: "–ú–æ–±–∏–ª—å–Ω—ã–π",
                2: "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –º–æ–±–∏–ª—å–Ω—ã–π",
                3: "VOIP",
                4: "–¢–µ–ª–µ—Ñ–æ–Ω–∏—è –æ–±—â–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è",
                5: "–ü–µ–π–¥–∂–µ—Ä",
                6: "–£—á—Ä–µ–∂–¥–µ–Ω—á–µ—Å–∫–∞—è —Å–µ—Ç—å",
                7: "–õ–∏—á–Ω–æ–µ —Ä–∞–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
                8: "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä",
                9: "–¢–û–õ–¨–ö–û –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø",
                10: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            }

            number_type = type_names.get(num_type, "–ù–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω")
            carrier_name = carrier.name_for_number(parsed_number, "ru") or "–ù–µ –Ω–∞–π–¥–µ–Ω"
            time_zones = timezone.time_zones_for_number(parsed_number)
            tz_info = ', '.join(time_zones) if time_zones else "–ù–µ –Ω–∞–π–¥–µ–Ω"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            info_message = (
                f"‚úÖ –í–∞—à –Ω–æ–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–µ–Ω!\n"
                f"–°—Ç—Ä–∞–Ω–∞: {country}\n"
                f"–¢–∏–ø –Ω–æ–º–µ—Ä–∞: {number_type}\n"
                f"–û–ø–µ—Ä–∞—Ç–æ—Ä: {carrier_name}\n"
                f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {tz_info}"
            )
            await message.answer(info_message)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            create_profile(user_id=user_id, username=username, dogname=dname, phone=phone)

        except phonenumbers.NumberParseException as e:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.")
        except Exception as e:
            await message.answer(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞: {e}")
        finally:
            await message.answer(
                f"‚úîÔ∏è –°–ø–∞—Å–∏–±–æ, {username}!\n–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
                reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )